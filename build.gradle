plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id 'jacoco'
}

jib{
    from{
        image='adoptopenjdk/openjdk11:jre-11.0.2.9-alpine'
    }
    to{
//        image='asia-northeast3-docker.pkg.dev/dart-388516/cloud-run-source-deploy/dart-server:latest'
        image = 'asia-northeast3-docker.pkg.dev/dart-400112/cloud-run-source-deploy/dart-server:latest'
        auth {
            username = '_json_key'
//            password = new String(Base64.getDecoder().decode(System.getenv("GOOGLE_AR_CLIENT_SECRET_SSH_TEAM")))
            password = new String(Base64.getDecoder().decode(System.getenv("GOOGLE_AR_CLIENT_SECRET_SSH_SERVER")))
        }
    }
    container {
        environment = [
                "SPRING_PROFILE_ACTIVE": System.getenv("SPRING_PROFILES_ACTIVE")
        ]
        jvmFlags = ['-Xms512m', '-Xmx512m']
    }
}

group = 'com.ssh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.auth0:java-jwt:4.3.0'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'org.flywaydb:flyway-core'

    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.springframework:spring-context-indexer'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    testImplementation 'io.rest-assured:rest-assured'  // spring-boot 3는 rest-assured 5 이상을 사용해야함
    testImplementation "com.google.guava:guava:33.0.0-jre"
}

def querydslSrcDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
    delete file(querydslSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('copyPrivate', Copy) {
    copy {
        from './dart-secret'
        include '*.yml'
        into 'src/main/resources'
    }
}

test {
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled false
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}
